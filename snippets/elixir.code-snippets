{
	"GenServer": {
		"scope": "elixir",
		"prefix": "egs",
		"body": [
			"defmodule module_name do",
			"  use GenServer",
			"",
			"  # Public API",
			"  ",
			"  def start_link(args) do",
			"    {opts, state} = Keyword.split(args, [:name])",
			"    GenServer.start_link(__MODULE__, state, opts)",
			"  end",
			"",
			"  # Callbacks",
			"",
			"  @impl true",
			"  def init([]) do",
			"    {:ok, []}",
			"  end",
			"",
			"  @impl true",
			"  def handle_call(:action, _from, [] = state) do",
			"    reply = []",
			"    new_state = state",
			"    {:reply, reply, new_state}",
			"  end",
			"",
			"  @impl true",
			"  def handle_cast(:action, state) do",
			"    new_state = state",
			"    {:noreply, new_state}",
			"  end",
			"",
			"  # Out of band messages",
			"",
			"  @impl true",
			"  def handle_info(msg, state) do",
			"    new_state = state",
			"    {:noreply, new_state}",
			"  end",
			"",
			"  # Termination",
			"",
			"  def stop(pid, reason \\\\ :normal, timeout \\\\ :infinity) do ",
			"    GenServer.stop(pid, reason, timeout)",
			"  end",
			"",
			"  def terminate(reason, state) do",
			"    # Perform cleanup here",
			"  end",
			"end"
		],
		"description": "GenServer"
	}
}